version: '3.9'

platform: linux/arm64/v8

logger: &logger-link
  options:
    max-size: '50m'
  driver: json-file

env-mdb: &env-mdb-link
  MYSQL_HOST: ${MYSQL_HOST:? MYSQL_HOST is required }
  MYSQL_USER_NAME: ${MYSQL_USER_NAME:? MYSQL_USER_NAME is required }
  MYSQL_USER_PASS: ${MYSQL_USER_PASS:? MYSQL_USER_PASS is required }
  MYSQL_ROOT_PASS: ${MYSQL_ROOT_PASS:? MYSQL_ROOT_PASS is required }

env-wp: &env-wp-link
  WP_URL: ${WP_URL:? WP_URL is required }
  WP_TITLE: ${WP_TITLE:? WP_TITLE is required }
  WP_DB_NAME: ${WP_DB_NAME:? WP_DB_NAME is required }
  WP_ADMIN_NAME: ${WP_ADMIN_NAME:? WP_ADMIN_NAME is required }
  WP_ADMIN_PASS: ${WP_ADMIN_PASS:? WP_ADMIN_PASS is required }
  WP_ADMIN_EMAIL: ${WP_ADMIN_EMAIL:? WP_ADMIN_EMAIL is required }
  WP_USER_NAME: ${WP_USER_NAME:? WP_USER_NAME is required }
  WP_USER_PASS: ${WP_USER_PASS:? WP_USER_PASS is required }
  WP_USER_EMAIL: ${WP_USER_EMAIL:? WP_USER_EMAIL is required }

env-ftps: &env-ftps-link
  FTP_ROOT_DIR:  ${FTP_ROOT_DIR:? FTP_ROOT_DIR is required }
  FTP_USER_NAME: ${FTP_USER_NAME:? FTP_USER_NAME is required }
  FTP_USER_PASS: ${FTP_USER_PASS:? FTP_USER_PASS is required }
  FTP_PASV_PORT_MIN: ${FTP_PASV_PORT_MIN:? FTP_PASV_PORT_MIN is required }
  FTP_PASV_PORT_MAX: ${FTP_PASV_PORT_MAX:? FTP_PASV_PORT_MAX is required }

services:
  mariadb:
    container_name: mariadb
    build: ./requirements/mariadb
    image: mariadb
    restart: always
    init: true
    networks:
      - intercom
    volumes:
      - mdb_pv:/var/lib/mysql
    environment: *env-mdb-link
    healthcheck:
      test: [ 'CMD', 'mysqladmin', 'ping', '--silent', '-p${MYSQL_ROOT_PASSWORD}' ]
      start_period: 1m
      retries: 3
    logging: *logger-link

  wordpress:
    container_name: wordpress
    build: ./requirements/wordpress
    image: wordpress
    restart: always
    init: true
    networks:
      - intercom
    volumes: &wp-volume
      - wp_pv:/var/www/html/wordpress
    environment:
      <<: *env-mdb-link
      <<: *env-wp-link
    # healthcheck:
    #   test: #php-fpm daemon test using status\ping
    #   start_period: 1m
    #   retries: 3
    depends_on:
      mariadb:
        condition: service_healthy
    logging: *logger-link

  nginx:
    container_name: nginx
    build: ./requirements/nginx
    image: nginx
    restart: always
    init: true
    networks:
      - intercom
    volumes: 
      <<: *wp-volume
      - resume_pv:/var/www/html/resume:ro
      - certs_pv:${CERTS_DIR:? CERTS_DIR is required}:ro
    ports:
      - 443:443
    healthcheck:
      test: [ 'CMD', 'curl' '-kf' 'https://${DOMAIN_NAME}/healthcheck' ]
      start_period: 15s
      retries: 3
    depends_on:
      wordpress:
        condition: service_healthy
    logging: *logger-link

 adminer:
    container_name: adminer
    build: ./requirements/bonus/adminer
    image: adminer
    restart: always
    init: true
    networks:
      - intercom
    # healthcheck:
    #   test: #php-fpm daemon test using status\ping
    #   start_period: 1m
    #   retries: 3
    depends_on:
      mariadb:
        condition: service_healthy
    logging: *logger-link

  redis:
    container_name: redis
    build: ./requirements/bonus/redis
    image: redis
    restart: always
    init: true
    networks:
      - intercom
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      start_period: 1m
      retries: 3
    depends_on:
      wordpress:
        condition: service_healthy
    logging: *logger-link
  
  ftps:
    container_name: ftps
    build: ./requirements/bonus/ftps
    image: ftps
    restart: always
    init: true
    networks:
      - intercom
    environment: *env-ftps-link
    volumes:
      <<: *wp-volume
      - certs_pv:${CERTS_DIR:? CERTS_DIR is required}:ro
    ports:
      - 21:21
      - ${FTP_PASV_PORT_MIN}-${FTP_PASV_PORT_MAX}:${FTP_PASV_PORT_MIN}-${FTP_PASV_PORT_MAX}
    depends_on:
      wordpress:
        condition: service_healthy
    logging: *logger-link

  prometheus:
    container_name: prometheus
    build: ./requirements/bonus/prometheus
    image: prometheus
    init: true
    ports:
      - ${PROMETHEUS_PORT:? PROMETHEUS_PORT is required}:${PROMETHEUS_PORT}
    logging: *logger-link
  
  cadvisor:
    container_name: cadvisor
    build: ./requirements/bonus/cadvisor
    image: cadvisor
    init: true
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk:/dev/disk/:ro
    expose: 
      - ${CADVISOR_PORT:? CADVISOR_PORT is required}
    healthcheck:
      test: [ 'CMD', 'wget', '--quiet', '--spider', 'http://localhost:${CADVISOR_PORT}/healthz' ]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 1m
    logging: *logger-link

volumes:
  wp_pv:
    name: wp_pv
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PV_WP_PATH:? PV_WP_PATH is required }
  mdb_pv:
    name: mdb_pv
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PV_MDB_PATH:? PV_MDB_PATH is required }
  certs_pv:
    name: certs_pv
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${PV_CERTS_PATH:? PV_CERTS_PATH is required }
  resume_pv:
    name: resume_pv
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${PV_RESUME_PATH:? PV_RESUME_PATH is required }

networks:
  intercom:
    driver: bridge